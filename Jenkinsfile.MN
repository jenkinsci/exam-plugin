Date today = new Date();
String now = today.getTime().toString();
String branch = env.BRANCH_NAME
branch = java.net.URLEncoder.encode(branch, "UTF-8")
branch = branch.replaceAll("%", "%%")

def getVersion() {
    def matcher = readFile('pom.xml') =~ '<version>(.+?)</version>'
    matcher ? matcher[0][1] : null
}

pipeline{
    agent {
        node {
            label 'build'
        }
    }
    tools {
        jdk 'java8_x86_64'
        maven 'M3'
        'com.cloudbees.jenkins.plugins.customtools.CustomTool' 'curl'
    }
    environment {
        CURL_PATH = tool name: 'curl', type: 'com.cloudbees.jenkins.plugins.customtools.CustomTool'
    }
    options {
        disableConcurrentBuilds()
        timestamps()
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '60', numToKeepStr: '60')
    }
    stages{
        stage('Build') {
            steps {
				withCredentials([usernamePassword(credentialsId: 'teamscale', passwordVariable: 'ts_key', usernameVariable: 'ts_user')]) {
					configFileProvider([configFile(fileId: 'JENKINS', targetLocation: 'settings.xml', variable: 'settings')]) {
                        bat """
                            set jenkinsCiOpts=--batch-mode --show-version --errors --no-transfer-progress --update-snapshots -Dmaven.test.failure.ignore -Dspotbugs.failOnError=false -Dcheckstyle.failOnViolation=false -Dcheckstyle.failsOnError=false
                            set opts=-Dts.user=%ts_user% -Dts.url=\"%ts.url%\" -Dts.apikey=%ts_key% -Dcurl.path=\"%CURL_PATH%\\curl.exe\" -Dts.branch=${branch} -Dbuild.time=${now}
                            
                            set profiles=-Penable-jacoco,teamscale
                            
                            mvn %jenkinsCiOpts% clean install -s \"%settings%\" %profiles% %opts%
                        """
					}
				}
            }
        }
		stage ('license scan client') {
			steps {
				script {
					withCredentials([usernamePassword(credentialsId: 'blackduck', passwordVariable: 'bd_apikey', usernameVariable: 'bd_user')]) {
						configFileProvider([configFile(fileId: 'TCC', targetLocation: 'settings.xml', variable: 'settings')]) {
							version = getVersion();
							if(env.BLACKDUCK_STATE == "online"){
								def returnvalue = bat(returnStatus: true, script: """
									set OPTS=--detect.maven.build.command='-s %settings% -Plokalp2'
									set OPTS=%OPTS% --detect.project.name='Jenkins Exam plugin' --detect.project.version.name=${version}
									%BLACKDUCK_GENERAL% --blackduck.api.token=${bd_apikey} %OPTS%
									""", label: 'bdScan')
								if(returnvalue != 0) {
									unstable 'BlackDuck scan failed'
								}
							}
						}
					}
				}
			}
		}
    }
    post {
        always {
			archiveArtifacts allowEmptyArchive: true, artifacts: '**/target/site/jacoco/jacoco.xml'
            junit '**/target/surefire-reports/*.xml'
        }
    }
}