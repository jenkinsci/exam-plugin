/**
 * Copyright (c) 2018 MicroNova AG
 * All rights reserved.
 * <p>
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * <p>
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * <p>
 * 2. Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 * <p>
 * 3. Neither the name of MicroNova AG nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 * <p>
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package jenkins.internal.enumeration;

/**
 * A representation of the literals of the enumeration '<em><b>Test Case State</b></em>',
 * and utility methods for working with them.
 * <p>
 * Möglicher Wert für state und shadowState eines
 * generated
 */
public enum TestCaseState {
    // This file was generated by EnumClassTemplate.xtend, DO NOT MODIFY!

    /**
     * The '<em><b>Not Yet Specified</b></em>' literal object, whose name, value and literal are
     * NotYetSpecified, 1 and "notSpec".
     * <p>
     * Der TestCase wird erst noch spezifiziert.
     *
     * @see #NOT_YET_SPECIFIED_VALUE
     * generated
     * ordered
     */
    NOT_YET_SPECIFIED(1, "NotYetSpecified", "notSpec"),

    /**
     * The '<em><b>Specified</b></em>' literal object, whose name, value and literal are
     * Specified, 2 and "spec".
     * <p>
     * Die Spezifikation des TestCase ist abgeschlossen, wurde aber
     * noch keinem Review unterzogen.
     *
     * @see #SPECIFIED_VALUE
     * generated
     * ordered
     */
    SPECIFIED(2, "Specified", "spec"),

    /**
     * The '<em><b>Reviewed</b></em>' literal object, whose name, value and literal are
     * Reviewed, 3 and "reviewd".
     * <p>
     * Die Spezifikation des TestCase wurde einem Review
     * unterzogen.
     *
     * @see #REVIEWED_VALUE
     * generated
     * ordered
     */
    REVIEWED(3, "Reviewed", "reviewd"),

    /**
     * The '<em><b>Not Yet Implemented</b></em>' literal object, whose name, value and literal are
     * NotYetImplemented, 4 and "notImpl".
     * <p>
     * Der TestCase wird implementiert.
     *
     * @see #NOT_YET_IMPLEMENTED_VALUE
     * generated
     * ordered
     */
    NOT_YET_IMPLEMENTED(4, "NotYetImplemented", "notImpl"),

    /**
     * The '<em><b>Implemented</b></em>' literal object, whose name, value and literal are
     * Implemented, 5 and "impl".
     * <p>
     * Die Implementierung des TestCase ist abgeschlossen, wurde
     * aber noch nicht freigegeben.
     *
     * @see #IMPLEMENTED_VALUE
     * generated
     * ordered
     */
    IMPLEMENTED(5, "Implemented", "impl"),

    /**
     * The '<em><b>Productive</b></em>' literal object, whose name, value and literal are
     * Productive, 6 and "product".
     * <p>
     * Die Implementierung des TestCase ist einsetzbar.
     *
     * @see #PRODUCTIVE_VALUE
     * generated
     * ordered
     */
    PRODUCTIVE(6, "Productive", "product"),

    /**
     * The '<em><b>Invalid</b></em>' literal object, whose name, value and literal are
     * Invalid, 7 and "inv".
     * <p>
     * Die Spezifikation des TestCase ist fehlerhaft oder nicht
     * umsetzbar.
     *
     * @see #INVALID_VALUE
     * generated
     * ordered
     */
    INVALID(7, "Invalid", "inv");

    /**
     * The '<em><b>Not Yet Specified</b></em>' literal value, which is 1.
     * <p>
     * Der TestCase wird erst noch spezifiziert.
     *
     * @see #NOT_YET_SPECIFIED
     * generated
     * ordered
     */
    public static final int NOT_YET_SPECIFIED_VALUE = 1;

    /**
     * The '<em><b>Specified</b></em>' literal value, which is 2.
     * <p>
     * Die Spezifikation des TestCase ist abgeschlossen, wurde aber
     * noch keinem Review unterzogen.
     *
     * @see #SPECIFIED
     * generated
     * ordered
     */
    public static final int SPECIFIED_VALUE = 2;

    /**
     * The '<em><b>Reviewed</b></em>' literal value, which is 3.
     * <p>
     * Die Spezifikation des TestCase wurde einem Review
     * unterzogen.
     *
     * @see #REVIEWED
     * generated
     * ordered
     */
    public static final int REVIEWED_VALUE = 3;

    /**
     * The '<em><b>Not Yet Implemented</b></em>' literal value, which is 4.
     * <p>
     * Der TestCase wird implementiert.
     *
     * @see #NOT_YET_IMPLEMENTED
     * generated
     * ordered
     */
    public static final int NOT_YET_IMPLEMENTED_VALUE = 4;

    /**
     * The '<em><b>Implemented</b></em>' literal value, which is 5.
     * <p>
     * Die Implementierung des TestCase ist abgeschlossen, wurde
     * aber noch nicht freigegeben.
     *
     * @see #IMPLEMENTED
     * generated
     * ordered
     */
    public static final int IMPLEMENTED_VALUE = 5;

    /**
     * The '<em><b>Productive</b></em>' literal value, which is 6.
     * <p>
     * Die Implementierung des TestCase ist einsetzbar.
     *
     * @see #PRODUCTIVE
     * generated
     * ordered
     */
    public static final int PRODUCTIVE_VALUE = 6;

    /**
     * The '<em><b>Invalid</b></em>' literal value, which is 7.
     * <p>
     * Die Spezifikation des TestCase ist fehlerhaft oder nicht
     * umsetzbar.
     *
     * @see #INVALID
     * generated
     * ordered
     */
    public static final int INVALID_VALUE = 7;


    /**
     * Returns the '<em><b>Test Case State</b></em>' literal with the specified literal value.
     *
     * @param literal the literal value
     * @return the literal with that value, or null if no literal has that value
     * generated
     */
    public static TestCaseState get(String literal) {
        for (TestCaseState state : TestCaseState.values()) {
            if (literal.equals(state.getLiteral())) {
                return state;
            }
        }
        return null;
    }

    /**
     * Returns the '<em><b>Test Case State</b></em>' literal with the specified name.
     *
     * @param name the literal name
     * @return the literal with that name, or null if no literal has that name
     * generated
     */
    public static TestCaseState getByName(String name) {
        for (TestCaseState state : TestCaseState.values()) {
            if (name.equals(state.getName())) {
                return state;
            }
        }
        return null;
    }


    /**
     * generated
     */
    private final int value;

    /**
     * generated
     */
    private final String name;

    /**
     * generated
     */
    private final String literal;

    /**
     * Only this class can construct instances.
     * generated
     */
    private TestCaseState(int value, String name, String literal) {
        this.value = value;
        this.name = name;
        this.literal = literal;
    }

    /**
     * generated
     */
    public int getValue() {
        return this.value;
    }

    /**
     * generated
     */
    public String getName() {
        return this.name;
    }

    /**
     * generated
     */
    public String getLiteral() {
        return this.literal;
    }

    /**
     * Returns the literal value of the enumerator, which is its string representation.
     * generated
     */
    @Override
    public String toString() {
        return this.literal;
    }
} // TestCaseState
